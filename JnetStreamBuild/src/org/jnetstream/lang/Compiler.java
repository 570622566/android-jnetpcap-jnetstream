/**
 * Copyright (C) 2007 Sly Technologies, Inc. This library is free software; you
 * can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version. This
 * library is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details. You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */
package org.jnetstream.lang;

import com.slytechs.tools.Tool;

/**
 * jNetStream compiler interface for all types of compilers.
 * 
 * @author Mark Bednarczyk
 * @author Sly Technologies, Inc.
 */
public interface Compiler extends Tool {

	/**
	 * Checks if the combination of output to be generated is supported by this
	 * compiler. Not all combinations, or even none at all may be supported by
	 * this compiler.
	 * 
	 * @param lang
	 *          target language
	 * @param kind
	 *          target output type
	 * @return true means it is supported otherwise false
	 */
	public boolean isTargetSupported(Language lang, OutputKind kind);

	/**
	 * Compiles an expression to target output. For {@link Language#JAVA} and
	 * {@link Language#JASIM} target language the generated classfile will
	 * implement the {@link Expression} interface. Once the output class is
	 * compiled or assemged down to a concrete from the output generated by this
	 * compiler, the class will implement the {@link Expression} interface. For
	 * other {@link Language} types, the behavior will be similar but in the
	 * context of the output language.
	 */
	public void compileExpression();

	/**
	 * Compiles an expression to target output.
	 * @param target TODO
	 * @param source TODO
	 */
	public void compileBinding(Language target, String source);

	/**
	 * Compiles an expression to target output.
	 */
	public void compileFilter();
}
